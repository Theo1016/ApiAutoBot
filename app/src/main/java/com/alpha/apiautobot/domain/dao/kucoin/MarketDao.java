package com.alpha.apiautobot.domain.dao.kucoin;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MARKET".
*/
public class MarketDao extends AbstractDao<Market, Long> {

    public static final String TABLENAME = "MARKET";

    /**
     * Properties of entity Market.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CoinType = new Property(1, String.class, "coinType", false, "coinType");
        public final static Property Trading = new Property(2, boolean.class, "trading", false, "trading");
        public final static Property LastDealPrice = new Property(3, Double.class, "lastDealPrice", false, "lastDealPrice");
        public final static Property Buy = new Property(4, Double.class, "buy", false, "buy");
        public final static Property Sell = new Property(5, Double.class, "sell", false, "sell");
        public final static Property CoinTypePair = new Property(6, String.class, "coinTypePair", false, "coinTypePair");
        public final static Property Sort = new Property(7, Double.class, "sort", false, "sort");
        public final static Property FeeRate = new Property(8, Double.class, "feeRate", false, "feeRate");
        public final static Property VolValue = new Property(9, Double.class, "volValue", false, "volValue");
        public final static Property High = new Property(10, Double.class, "high", false, "high");
        public final static Property Datetime = new Property(11, long.class, "datetime", false, "datetime");
        public final static Property Vol = new Property(12, Double.class, "vol", false, "vol");
        public final static Property Low = new Property(13, Double.class, "low", false, "low");
        public final static Property ChangeRate = new Property(14, Double.class, "changeRate", false, "changeRate");
        public final static Property Change = new Property(15, Double.class, "change", false, "change");
        public final static Property TimeStamp = new Property(16, String.class, "timeStamp", false, "timeStamp");
    }


    public MarketDao(DaoConfig config) {
        super(config);
    }
    
    public MarketDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MARKET\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"coinType\" TEXT," + // 1: coinType
                "\"trading\" INTEGER NOT NULL ," + // 2: trading
                "\"lastDealPrice\" REAL," + // 3: lastDealPrice
                "\"buy\" REAL," + // 4: buy
                "\"sell\" REAL," + // 5: sell
                "\"coinTypePair\" TEXT," + // 6: coinTypePair
                "\"sort\" REAL," + // 7: sort
                "\"feeRate\" REAL," + // 8: feeRate
                "\"volValue\" REAL," + // 9: volValue
                "\"high\" REAL," + // 10: high
                "\"datetime\" INTEGER NOT NULL ," + // 11: datetime
                "\"vol\" REAL," + // 12: vol
                "\"low\" REAL," + // 13: low
                "\"changeRate\" REAL," + // 14: changeRate
                "\"change\" REAL," + // 15: change
                "\"timeStamp\" TEXT);"); // 16: timeStamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MARKET\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Market entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String coinType = entity.getCoinType();
        if (coinType != null) {
            stmt.bindString(2, coinType);
        }
        stmt.bindLong(3, entity.getTrading() ? 1L: 0L);
 
        Double lastDealPrice = entity.getLastDealPrice();
        if (lastDealPrice != null) {
            stmt.bindDouble(4, lastDealPrice);
        }
 
        Double buy = entity.getBuy();
        if (buy != null) {
            stmt.bindDouble(5, buy);
        }
 
        Double sell = entity.getSell();
        if (sell != null) {
            stmt.bindDouble(6, sell);
        }
 
        String coinTypePair = entity.getCoinTypePair();
        if (coinTypePair != null) {
            stmt.bindString(7, coinTypePair);
        }
 
        Double sort = entity.getSort();
        if (sort != null) {
            stmt.bindDouble(8, sort);
        }
 
        Double feeRate = entity.getFeeRate();
        if (feeRate != null) {
            stmt.bindDouble(9, feeRate);
        }
 
        Double volValue = entity.getVolValue();
        if (volValue != null) {
            stmt.bindDouble(10, volValue);
        }
 
        Double high = entity.getHigh();
        if (high != null) {
            stmt.bindDouble(11, high);
        }
        stmt.bindLong(12, entity.getDatetime());
 
        Double vol = entity.getVol();
        if (vol != null) {
            stmt.bindDouble(13, vol);
        }
 
        Double low = entity.getLow();
        if (low != null) {
            stmt.bindDouble(14, low);
        }
 
        Double changeRate = entity.getChangeRate();
        if (changeRate != null) {
            stmt.bindDouble(15, changeRate);
        }
 
        Double change = entity.getChange();
        if (change != null) {
            stmt.bindDouble(16, change);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(17, timeStamp);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Market entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String coinType = entity.getCoinType();
        if (coinType != null) {
            stmt.bindString(2, coinType);
        }
        stmt.bindLong(3, entity.getTrading() ? 1L: 0L);
 
        Double lastDealPrice = entity.getLastDealPrice();
        if (lastDealPrice != null) {
            stmt.bindDouble(4, lastDealPrice);
        }
 
        Double buy = entity.getBuy();
        if (buy != null) {
            stmt.bindDouble(5, buy);
        }
 
        Double sell = entity.getSell();
        if (sell != null) {
            stmt.bindDouble(6, sell);
        }
 
        String coinTypePair = entity.getCoinTypePair();
        if (coinTypePair != null) {
            stmt.bindString(7, coinTypePair);
        }
 
        Double sort = entity.getSort();
        if (sort != null) {
            stmt.bindDouble(8, sort);
        }
 
        Double feeRate = entity.getFeeRate();
        if (feeRate != null) {
            stmt.bindDouble(9, feeRate);
        }
 
        Double volValue = entity.getVolValue();
        if (volValue != null) {
            stmt.bindDouble(10, volValue);
        }
 
        Double high = entity.getHigh();
        if (high != null) {
            stmt.bindDouble(11, high);
        }
        stmt.bindLong(12, entity.getDatetime());
 
        Double vol = entity.getVol();
        if (vol != null) {
            stmt.bindDouble(13, vol);
        }
 
        Double low = entity.getLow();
        if (low != null) {
            stmt.bindDouble(14, low);
        }
 
        Double changeRate = entity.getChangeRate();
        if (changeRate != null) {
            stmt.bindDouble(15, changeRate);
        }
 
        Double change = entity.getChange();
        if (change != null) {
            stmt.bindDouble(16, change);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(17, timeStamp);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Market readEntity(Cursor cursor, int offset) {
        Market entity = new Market( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // coinType
            cursor.getShort(offset + 2) != 0, // trading
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // lastDealPrice
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // buy
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // sell
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // coinTypePair
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // sort
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // feeRate
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // volValue
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // high
            cursor.getLong(offset + 11), // datetime
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // vol
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // low
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // changeRate
            cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15), // change
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // timeStamp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Market entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCoinType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTrading(cursor.getShort(offset + 2) != 0);
        entity.setLastDealPrice(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setBuy(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setSell(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setCoinTypePair(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSort(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setFeeRate(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setVolValue(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setHigh(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setDatetime(cursor.getLong(offset + 11));
        entity.setVol(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setLow(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setChangeRate(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setChange(cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15));
        entity.setTimeStamp(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Market entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Market entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Market entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
