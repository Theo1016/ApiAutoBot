package com.alpha.apiautobot.domain.dao.kucoin;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRANSACTION_ORDER".
*/
public class TransactionOrderDao extends AbstractDao<TransactionOrder, Long> {

    public static final String TABLENAME = "TRANSACTION_ORDER";

    /**
     * Properties of entity TransactionOrder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CoinType = new Property(1, String.class, "coinType", false, "coinType");
        public final static Property BuyPrice = new Property(2, String.class, "buyPrice", false, "buy_price");
        public final static Property BuyAmount = new Property(3, String.class, "buyAmount", false, "buy_amount");
        public final static Property BuyVolume = new Property(4, String.class, "buyVolume", false, "buy_volume");
        public final static Property SellPrice = new Property(5, String.class, "sellPrice", false, "sell_price");
        public final static Property SellAmount = new Property(6, String.class, "sellAmount", false, "sell_amount");
        public final static Property SellVolume = new Property(7, String.class, "sellVolume", false, "sell_volume");
        public final static Property TimeStamp = new Property(8, long.class, "timeStamp", false, "timeStamp");
    }


    public TransactionOrderDao(DaoConfig config) {
        super(config);
    }
    
    public TransactionOrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRANSACTION_ORDER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"coinType\" TEXT," + // 1: coinType
                "\"buy_price\" TEXT," + // 2: buyPrice
                "\"buy_amount\" TEXT," + // 3: buyAmount
                "\"buy_volume\" TEXT," + // 4: buyVolume
                "\"sell_price\" TEXT," + // 5: sellPrice
                "\"sell_amount\" TEXT," + // 6: sellAmount
                "\"sell_volume\" TEXT," + // 7: sellVolume
                "\"timeStamp\" INTEGER NOT NULL );"); // 8: timeStamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRANSACTION_ORDER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TransactionOrder entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String coinType = entity.getCoinType();
        if (coinType != null) {
            stmt.bindString(2, coinType);
        }
 
        String buyPrice = entity.getBuyPrice();
        if (buyPrice != null) {
            stmt.bindString(3, buyPrice);
        }
 
        String buyAmount = entity.getBuyAmount();
        if (buyAmount != null) {
            stmt.bindString(4, buyAmount);
        }
 
        String buyVolume = entity.getBuyVolume();
        if (buyVolume != null) {
            stmt.bindString(5, buyVolume);
        }
 
        String sellPrice = entity.getSellPrice();
        if (sellPrice != null) {
            stmt.bindString(6, sellPrice);
        }
 
        String sellAmount = entity.getSellAmount();
        if (sellAmount != null) {
            stmt.bindString(7, sellAmount);
        }
 
        String sellVolume = entity.getSellVolume();
        if (sellVolume != null) {
            stmt.bindString(8, sellVolume);
        }
        stmt.bindLong(9, entity.getTimeStamp());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TransactionOrder entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String coinType = entity.getCoinType();
        if (coinType != null) {
            stmt.bindString(2, coinType);
        }
 
        String buyPrice = entity.getBuyPrice();
        if (buyPrice != null) {
            stmt.bindString(3, buyPrice);
        }
 
        String buyAmount = entity.getBuyAmount();
        if (buyAmount != null) {
            stmt.bindString(4, buyAmount);
        }
 
        String buyVolume = entity.getBuyVolume();
        if (buyVolume != null) {
            stmt.bindString(5, buyVolume);
        }
 
        String sellPrice = entity.getSellPrice();
        if (sellPrice != null) {
            stmt.bindString(6, sellPrice);
        }
 
        String sellAmount = entity.getSellAmount();
        if (sellAmount != null) {
            stmt.bindString(7, sellAmount);
        }
 
        String sellVolume = entity.getSellVolume();
        if (sellVolume != null) {
            stmt.bindString(8, sellVolume);
        }
        stmt.bindLong(9, entity.getTimeStamp());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TransactionOrder readEntity(Cursor cursor, int offset) {
        TransactionOrder entity = new TransactionOrder( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // coinType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // buyPrice
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // buyAmount
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // buyVolume
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sellPrice
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sellAmount
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sellVolume
            cursor.getLong(offset + 8) // timeStamp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TransactionOrder entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCoinType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBuyPrice(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBuyAmount(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBuyVolume(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSellPrice(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSellAmount(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSellVolume(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTimeStamp(cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TransactionOrder entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TransactionOrder entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TransactionOrder entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
